<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${dashboard_title}</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 30px;
        }
        h1 {
            color: #232f3e;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
        }
        .info-banner {
            background-color: #d1ecf1;
            border: 1px solid #bee5eb;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
            color: #0c5460;
        }
        .summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        .summary-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }
        .summary-card h3 {
            margin: 0 0 10px 0;
            font-size: 2em;
        }
        .summary-card p {
            margin: 0;
            font-size: 1.1em;
        }
        .charts-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }
        .chart-container {
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            padding: 20px;
        }
        .instances-table {
            overflow-x: auto;
            margin-top: 30px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        th {
            background-color: #232f3e;
            color: white;
            font-weight: 600;
        }
        tr:hover {
            background-color: #f8f9fa;
        }
        .status-running {
            color: #28a745;
            font-weight: bold;
        }
        .status-stopped {
            color: #dc3545;
            font-weight: bold;
        }
        .instance-type {
            background-color: #e9ecef;
            padding: 4px 8px;
            border-radius: 4px;
            font-family: monospace;
        }
        .az-tag {
            background-color: #007bff;
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.8em;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üñ•Ô∏è ${dashboard_title}</h1>
        
        <div class="info-banner">
            <strong>üìç Dashboard Location:</strong> S3 Bucket: ${bucket_name} | Region: ${region}<br>
            <strong>üîí Access:</strong> Restricted to authorized networks only<br>
            <strong>üìä Last Updated:</strong> ${last_updated} (Auto-generated by Terraform)
        </div>
        
        <div class="summary">
            <div class="summary-card">
                <h3>${total_instances}</h3>
                <p>Total Instances</p>
            </div>
            <div class="summary-card">
                <h3>${running_instances}</h3>
                <p>Running</p>
            </div>
            <div class="summary-card">
                <h3>${stopped_instances}</h3>
                <p>Stopped</p>
            </div>
            <div class="summary-card">
                <h3>${unique_azs}</h3>
                <p>Availability Zones</p>
            </div>
        </div>

        <div class="charts-container">
            <div class="chart-container">
                <h3>Instance Status Distribution</h3>
                <canvas id="statusChart"></canvas>
            </div>
            <div class="chart-container">
                <h3>Instance Types Distribution</h3>
                <canvas id="typeChart"></canvas>
            </div>
        </div>

        <div class="charts-container">
            <div class="chart-container">
                <h3>Availability Zone Distribution</h3>
                <canvas id="azChart"></canvas>
            </div>
            <div class="chart-container">
                <h3>Launch Timeline</h3>
                <canvas id="timelineChart"></canvas>
            </div>
        </div>

        <div class="instances-table">
            <h3>üìã Detailed Instance Information (Sorted by Launch Date)</h3>
            <table>
                <thead>
                    <tr>
                        <th>Instance ID</th>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Private IP</th>
                        <th>Availability Zone</th>
                        <th>Launch Date</th>
                    </tr>
                </thead>
                <tbody id="instancesTableBody">
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Instance data (sorted by launch date - oldest first) - Live data from Terraform
        const instances = ${instances_js};

        // Populate table
        const tableBody = document.getElementById('instancesTableBody');
        instances.forEach(instance => {
            const row = tableBody.insertRow();
            row.innerHTML = `
                <td><code>$${instance.id}</code></td>
                <td>$${instance.name || 'N/A'}</td>
                <td><span class="instance-type">$${instance.type}</span></td>
                <td><span class="status-$${instance.status}">$${instance.status.toUpperCase()}</span></td>
                <td>$${instance.ip || 'N/A'}</td>
                <td><span class="az-tag">$${instance.az}</span></td>
                <td>$${instance.launch}</td>
            `;
        });

        // Status Chart
        const statusCtx = document.getElementById('statusChart').getContext('2d');
        const statusCounts = {};
        instances.forEach(i => statusCounts[i.status] = (statusCounts[i.status] || 0) + 1);
        
        new Chart(statusCtx, {
            type: 'doughnut',
            data: {
                labels: Object.keys(statusCounts).map(s => s.charAt(0).toUpperCase() + s.slice(1)),
                datasets: [{
                    data: Object.values(statusCounts),
                    backgroundColor: ['#28a745', '#dc3545', '#ffc107', '#17a2b8'],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Instance Types Chart
        const typeCtx = document.getElementById('typeChart').getContext('2d');
        const typeCounts = {};
        instances.forEach(i => typeCounts[i.type] = (typeCounts[i.type] || 0) + 1);
        
        new Chart(typeCtx, {
            type: 'bar',
            data: {
                labels: Object.keys(typeCounts),
                datasets: [{
                    label: 'Count',
                    data: Object.values(typeCounts),
                    backgroundColor: ['#007bff', '#28a745', '#ffc107', '#17a2b8', '#6f42c1'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });

        // AZ Chart
        const azCtx = document.getElementById('azChart').getContext('2d');
        const azCounts = {};
        instances.forEach(i => azCounts[i.az] = (azCounts[i.az] || 0) + 1);
        
        new Chart(azCtx, {
            type: 'pie',
            data: {
                labels: Object.keys(azCounts),
                datasets: [{
                    data: Object.values(azCounts),
                    backgroundColor: ['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff'],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });

        // Timeline Chart
        const timelineCtx = document.getElementById('timelineChart').getContext('2d');
        const yearCounts = {};
        instances.forEach(i => {
            const year = i.launch.split('-')[0];
            yearCounts[year] = (yearCounts[year] || 0) + 1;
        });
        
        new Chart(timelineCtx, {
            type: 'line',
            data: {
                labels: Object.keys(yearCounts).sort(),
                datasets: [{
                    label: 'Instances Launched',
                    data: Object.keys(yearCounts).sort().map(year => yearCounts[year]),
                    borderColor: '#007bff',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    </script>
</body>
</html>
